h1. garlic: lightweight continuous integration for rails using git

This is not a CI server, use cruisecontrol.rb for that.  This is a simple set
of rake tasks that let you specify a bunch of rails builds to run against, and
dependencies to install.

This is aimed at testing plugins (or apps) against multiple versions of rails,
and allows specifying other plugin dependencies (and their versions and any
setup requried).

If you want to run your specs (or whatever) against different versions of gems
that you have installed, then check out "ginger":http://github.com/freelancing-god/ginger by "Pat Allen":http://github.com/freelancing-god

Garlic works by cloning git repos for all your dependencies (so they all must be
git repos), and then using git to checkout various tags and branches to build
your app against.

h2. Get up and running quickly

You have a plugin and you want it tested against different versions of rails?

* install garlic as a gem (see below)
* cd into your (say, rspec tested) plugin directory

<pre>
  garlic generate rspec > garlic.rb
  garlic install_repos
  garlic
</pre>

* See what happens, edit garlic.rb to change rails versions and other stuff.

<pre>
  garlic --help # will probably help
</pre>

h2. Installing

Install the garlic gem

  sudo gem install ianwhite-garlic --source=http://gems.github.com

(if it's not installing as a gem from github)

  git clone git://github.com/ianwhite/garlic
  cd garlic
  rake package
  sudo gem install pkg/*.gem

h2. Example

To see garlic in action, download response_for, a rails plugin that uses
garlic for CI.

  git clone git://github.com/ianwhite/response_for 

run garlic
 
  garlic all

This will clone all the required git repos (done only once), set up the target
railses (done once), then run the targets.

h3. Once you've made some changes

You can prepare and run all the targets again (without fetching remote repos) by doing

 garlic
 
This will prepare all the targets, using the current HEAD of the repos, and run the
CI task again.

h3. Specifying particular targets

If you just want to run against a particular target or targets, you can use the TARGET or TARGETS
env var.

  garlic -t edge

h2. Running Shell commands across multiple targets

Check dis out

  garlic shell  # "Example output":http://gist.github.com/21496
  
---

The following still needs to be updated for the new gem/cmd-line version

h2. Example workflow

Let's say I'm patching resources_controller.

First I grab it, and set up garlic
  
  git clone git://github.com/ianwhite/resources_controller.git
  cd resources_controller
  rake get_garlic
  cp garlic_example.rb garlic.rb
  # I could now edit garlic.rb to point the repos at my local copies, for speed
  
Now, I download and run the CI suite
  
  rake garlic:all

Now, I make some changes

  git checkout -b my_change
  # ... commit some changes into 'my_change'
  rake garlic
  # ... everything is fine, so I can merge these into master, or send a pull request

h3. How do I run the specs on uncommitted code?

The best way is to make the changes in one of the 'work' targets.  For example:

  # after running rake garlic:all
  cd garlic/work/edge/vendor/plugins/resources_controller
  # ... make changes without committing
  rake spec
  # ... it passes, so commit
  git commit -m "My great change"
  
Now you can push these changes back upstream to your local 'master' repo

  git push origin my_changes # or you could push to master branch or whatever
  
Then cd back up there, and run rake garlic to verify your changes against the other
targets.  If these all pass, you can push, or send a pull request

h2.How to add garlic to your repo (example: rails plugin)

h4. 1. require the garlic tasks into your own Rakefile

  # rescue this just in case the plugin user doesn't have garlic
  begin
    require 'garlic'
  rescue LoadError
  end

h4. 2. add a garlic.rb

An example garlic.rb:

  garlic do
    # repos
    repo 'rails', :url => 'git://github.com/rails/rails'
    repo 'rspec', :url => 'git://github.com/dchelimsky/rspec'
    repo 'rspec-rails', :url => 'git://github.com/dchelimsky/rspec-rails'
    repo 'resources_controller', :path => '.'

    # targets
    target 'edge'
    target '2.0-stable', :branch => 'origin/2-0-stable'
    target '2.0.2', :tag => 'v2.0.2'

    all_targets do
      prepare do
        plugin 'resources_controller', :clone => true
        plugin 'rspec'
        plugin 'rspec-rails' do
          sh "script/generate rspec -f"
        end
      end

      run do
        cd "vendor/plugins/resources_controller"
          sh "rake spec:rcov:verify"
        end
      end
    end
  end
  
h4. 3. ignore the garlic artefacts

Example .gitignore

  .garlic_work
  
h4. 4. Run it

  rake garlic:all
  
And to run it again, once you've made changes

  rake garlic
  
To make sure you're running against the latest repos:

  rake garlic:update_repos
  
h2. Lend a hand

This is an early release, so there is plenty of scope for changes and improvement
If you want to lend a hand, get in touch.

(c) Ian White 2008 - ian.w.white@gmail.com
MIT Licence

